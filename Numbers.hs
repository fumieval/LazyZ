module LazyZ.Numbers where

import Prelude (div, mod, Maybe(..), (==), otherwise, Integer)
import LazyZ.Expr
import LazyZ.Combinator
import Data.Map as Map

encode :: Integer -> Expr e
encode n = case Map.lookup n numbers of
                   Just x -> x
                   Nothing
                       | mod n 2 == 0 -> n'
                       | otherwise -> succ n'
    where
        n' = encode 2 * encode (div n 2)

numbers = Map.fromList [(0,K :$ I)
    ,(1,I)
    ,(2,succ (encode 1))
    ,(3,succ (encode 2))
    ,(4,S :$ I :$ I :$ (encode 2))
    ,(5,succ (encode 4))
    ,(6,succ (encode 5))
    ,(7,succ (encode 6))
    ,(8,encode 2 ^ encode 3)
    ,(9,succ (encode 8))
    ,(10,encode 2 * encode 5)
    ,(11,succ (encode 10))
    ,(12,encode 3 * encode 4)
    ,(13,succ (encode 12))
    ,(14,succ (encode 13))
    ,(15,encode 3 * encode 5)
    ,(16,S :$ (S :$ I :$ I) :$ (encode 2))
    ,(17,succ (encode 16))
    ,(18,succ (encode 17))
    ,(19,succ (encode 18))
    ,(20,encode 4 + encode 16)
    ,(21,succ (encode 20))
    ,(22,succ (encode 21))
    ,(23,succ (encode 22))
    ,(24,encode 2 * encode 12)
    ,(25,encode 5 ^ encode 2)
    ,(26,succ (encode 25))
    ,(27,S :$ I :$ I :$ (encode 3))
    ,(28,succ (encode 27))
    ,(29,succ (encode 28))
    ,(30,succ (encode 29))
    ,(31,encode 4 + encode 27)
    ,(32,encode 2 * encode 16)
    ,(33,succ (encode 32))
    ,(34,encode 2 * encode 17)
    ,(35,succ (encode 34))
    ,(36,encode 6 ^ encode 2)
    ,(37,succ (encode 36))
    ,(38,encode 2 * encode 19)
    ,(39,succ (encode 38))
    ,(40,encode 2 * encode 20)
    ,(41,encode 16 + encode 25)
    ,(42,encode 2 * encode 21)
    ,(43,encode 16 + encode 27)
    ,(44,succ (encode 43))
    ,(45,encode 5 * encode 9)
    ,(46,succ (encode 45))
    ,(47,encode 4 + encode 43)
    ,(48,encode 3 * encode 16)
    ,(49,succ (encode 48))
    ,(50,encode 2 * encode 25)
    ,(51,encode 3 * encode 17)
    ,(52,encode 2 * encode 26)
    ,(53,succ (encode 52))
    ,(54,encode 2 * encode 27)
    ,(55,succ (encode 54))
    ,(56,encode 2 * encode 28)
    ,(57,succ (encode 56))
    ,(58,encode 2 * encode 29)
    ,(59,succ (encode 58))
    ,(60,encode 2 * encode 30)
    ,(61,succ (encode 60))
    ,(62,encode 2 * encode 31)
    ,(63,succ (encode 62))
    ,(64,encode 4 ^ encode 3)
    ,(65,succ (encode 64))
    ,(66,succ (encode 65))
    ,(67,succ (encode 66))
    ,(68,encode 4 * encode 17)
    ,(69,succ (encode 68))
    ,(70,succ (encode 69))
    ,(71,succ (encode 70))
    ,(72,encode 4 * encode 18)
    ,(73,succ (encode 72))
    ,(74,encode 2 * encode 37)
    ,(75,encode 3 * encode 25)
    ,(76,encode 4 * encode 19)
    ,(77,succ (encode 76))
    ,(78,encode 3 * encode 26)
    ,(79,succ (encode 78))
    ,(80,encode 5 * encode 16)
    ,(81,encode 3 ^ encode 4)
    ,(82,succ (encode 81))
    ,(83,succ (encode 82))
    ,(84,encode 3 * encode 28)
    ,(85,encode 5 * encode 17)
    ,(86,succ (encode 85))
    ,(87,encode 3 * encode 29)
    ,(88,succ (encode 87))
    ,(89,encode 8 + encode 81)
    ,(90,encode 5 * encode 18)
    ,(91,encode 27 + encode 64)
    ,(92,succ (encode 91))
    ,(93,encode 3 * encode 31)
    ,(94,succ (encode 93))
    ,(95,encode 5 * encode 19)
    ,(96,encode 2 * encode 48)
    ,(97,encode 16 + encode 81)
    ,(98,encode 2 * encode 49)
    ,(99,encode 3 * encode 33)
    ,(100,encode 10 ^ encode 2)
    ,(101,succ (encode 100))
    ,(102,encode 2 * encode 51)
    ,(103,succ (encode 102))
    ,(104,encode 4 * encode 26)
    ,(105,succ (encode 104))
    ,(106,encode 25 + encode 81)
    ,(107,encode 27 + encode 80)
    ,(108,encode 4 * encode 27)
    ,(109,succ (encode 108))
    ,(110,succ (encode 109))
    ,(111,succ (encode 110))
    ,(112,encode 4 * encode 28)
    ,(113,succ (encode 112))
    ,(114,succ (encode 113))
    ,(115,succ (encode 114))
    ,(116,encode 4 * encode 29)
    ,(117,succ (encode 116))
    ,(118,succ (encode 117))
    ,(119,encode 7 * encode 17)
    ,(120,encode 4 * encode 30)
    ,(121,encode 11 ^ encode 2)
    ,(122,succ (encode 121))
    ,(123,succ (encode 122))
    ,(124,encode 4 * encode 31)
    ,(125,encode 5 * encode 25)
    ,(126,succ (encode 125))
    ,(127,succ (encode 126))
    ,(128,encode 2 * encode 64)
    ,(256,S :$ I :$ I :$ encode 4)]